{"version":3,"sources":["logo.svg","features/ishome.js","features/status.js","components/Cardp.js","components/Home.js","features/theme.js","features/search.js","features/user.js","Navb.js","components/Cardc.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["homeslice","createSlice","name","initialState","value","reducers","Changehome","state","action","payload","actions","statusslice","Changestatus","LoadingButton","props","useState","isLoading","setLoading","incart","setincart","dispatch","useDispatch","status","useSelector","useEffect","a","adder","id","d","Button","variant","onClick","disabled","Cardp","themeColor","theme","Col","Card","style","width","bg","text","className","Body","Title","supabase","createClient","process","Home","setcatg","from","select","categorylist","data","error","addcatg","Container","fluid","Row","map","themeSlice","changeColor","searchSlice","changesearch","userSlice","changeuser","Navb","smShow","setSmShow","containerbg","textc","Navbar","expand","Brand","href","Toggle","aria-controls","Offcanvas","aria-labelledby","placement","backgroundColor","visibility","Header","closeButton","color","user","email","sigin","Modal","size","show","onHide","signout","sticky","Form","FormControl","type","placeholder","aria-label","onChange","event","target","quantity","handleClick","inc","Cardc","margin","Text","adder1","App","setstate","cartnew","setcartnew","setUser","settext","lin","setlin","ishome","search","getLinkWhastapp","t","message","split","join","getcheckout","order","ascending","users","clearall","delete","updateby1","q","update","eq","updatebyminus1","auth","signOut","length","temp","insert","cart_uid","cart_mid","cart_mname","signInWithGoogle","signIn","provider","session","ilike","getmenubysearch","onAuthStateChange","currentUser","getUsers","getcartnew","minHeight","Color","i","textDecoration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","store","configureStore","reducer","themeReducer","ishomeReducer","statusReducer","searchReducer","userReducer","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9dfaf2dd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialStateValue = true;\r\n\r\nexport const homeslice = createSlice({\r\n  name: \"ishome\",\r\n  initialState: { value: initialStateValue },\r\n  reducers: {\r\n    Changehome: (state, action) => {\r\n      state.value = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { Changehome } = homeslice.actions;\r\n\r\nexport default homeslice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialStateValue = false;\r\n\r\nexport const statusslice = createSlice({\r\n  name: \"status\",\r\n  initialState: { value: initialStateValue },\r\n  reducers: {\r\n    Changestatus: (state, action) => {\r\n      state.value = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { Changestatus } = statusslice.actions;\r\n\r\nexport default statusslice.reducer;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { Changehome } from \"../features/ishome\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Changestatus } from \"../features/status\";\r\nimport { useSelector } from \"react-redux\";\r\nfunction LoadingButton(props) {\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [incart, setincart] = useState(props.name + \"false\");\r\n  const dispatch = useDispatch();\r\n  let status = useSelector((state) => state.status.value);\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      async function d() {\r\n        await props.adder(props.id, props.name);\r\n        setLoading(false);\r\n        setincart(props.name + \"true\");\r\n        dispatch(Changestatus(!status));\r\n      }\r\n      d();\r\n    }\r\n  }, [isLoading]);\r\n\r\n  const handleClick = () => setLoading(true);\r\n\r\n  return (\r\n    <div>\r\n      {incart == props.name + \"true\" ? (\r\n        <Button\r\n          variant=\"success\"\r\n          onClick={() => {\r\n            dispatch(Changehome(false));\r\n          }}\r\n        >\r\n          go to cart\r\n        </Button>\r\n      ) : (\r\n        <Button\r\n          variant=\"primary\"\r\n          disabled={isLoading}\r\n          onClick={!isLoading ? handleClick : null}\r\n        >\r\n          {isLoading ? \"adding..\" : \"addtocart\"}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nfunction Cardp(props) {\r\n  let themeColor = useSelector((state) => state.theme.value);\r\n  themeColor = themeColor == \"\" ? \"light\" : themeColor;\r\n  return (\r\n    <Col>\r\n      <Card\r\n        style={{ width: \"18rem\" }}\r\n        bg={themeColor}\r\n        text={themeColor == \"dark\" ? \"light\" : \"dark\"}\r\n        className=\" m-2\"\r\n      >\r\n        <Card.Body>\r\n          <Card.Title>{props.name}</Card.Title>\r\n          <LoadingButton id={props.id} name={props.name} adder={props.adder} />\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n}\r\n\r\nexport default Cardp;\r\n","import React from \"react\";\r\nimport Cardp from \"../components/Cardp\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst supabaseUrl = \"https://grjedxqfuerqilmrvoat.supabase.co\";\r\nconst supabaseKey = process.env.REACT_APP_supabaseKey;\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nfunction Home(props) {\r\n  const [catg, setcatg] = useState([]);\r\n  useEffect(() => {\r\n    async function addcatg() {\r\n      let { data: categorylist, error } = await supabase\r\n        .from(\"categorylist\")\r\n        .select(\"*\");\r\n\r\n      setcatg(categorylist);\r\n    }\r\n    addcatg();\r\n  }, []);\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        {props.state.map((state) => (\r\n          <Cardp name={state.name} id={state.id} adder={props.adder} />\r\n        ))}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialStateValue = \"\";\r\n\r\nexport const themeSlice = createSlice({\r\n  name: \"theme\",\r\n  initialState: { value: initialStateValue },\r\n  reducers: {\r\n    changeColor: (state, action) => {\r\n      state.value = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { changeColor } = themeSlice.actions;\r\n\r\nexport default themeSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialStateValue = \"\";\r\n\r\nexport const searchSlice = createSlice({\r\n  name: \"search\",\r\n  initialState: { value: initialStateValue },\r\n  reducers: {\r\n    changesearch: (state, action) => {\r\n      state.value = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { changesearch } = searchSlice.actions;\r\n\r\nexport default searchSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialStateValue = null;\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: { value: initialStateValue },\r\n  reducers: {\r\n    changeuser: (state, action) => {\r\n      state.value = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { changeuser } = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { changeColor } from \"./features/theme\";\r\nimport { Changehome } from \"./features/ishome\";\r\nimport { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Changestatus } from \"./features/status\";\r\nimport { changesearch } from \"./features/search\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport changeuser from \"./features/user\";\r\n// import { useState } from \"react\";\r\n\r\nfunction Navb(props) {\r\n  // const [color, setColor] = useState(true);\r\n  const [smShow, setSmShow] = useState(false);\r\n  let themeColor = useSelector((state) => state.theme.value);\r\n  let status = useSelector((state) => state.status.value);\r\n  themeColor = themeColor == \"\" ? \"light\" : themeColor;\r\n  const dispatch = useDispatch();\r\n  let containerbg = themeColor == \"dark\" ? \"#161618\" : \"white\";\r\n  let textc = themeColor == \"dark\" ? \"white\" : \"black\";\r\n  const handleChange = (event) => {\r\n    if (event.target.value != \"Search\") {\r\n      dispatch(changesearch(event.target.value));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Navbar bg={themeColor} variant={themeColor} expand={false}>\r\n        <Container fluid>\r\n          <Navbar.Brand href=\"#\">SLSK</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"offcanvasNavbar\" />\r\n          <Navbar.Offcanvas\r\n            id=\"offcanvasNavbar\"\r\n            aria-labelledby=\"offcanvasNavbarLabel\"\r\n            placement=\"end\"\r\n            style={{ backgroundColor: containerbg, visibility: \"none\" }}\r\n          >\r\n            <Offcanvas.Header closeButton style={{ color: textc }}>\r\n              <Offcanvas.Title\r\n                id=\"offcanvasNavbarLabel\"\r\n                style={{ color: textc }}\r\n              >\r\n                Select\r\n              </Offcanvas.Title>\r\n            </Offcanvas.Header>\r\n            <Offcanvas.Body>\r\n              <Container\r\n                className=\"d-flex flex-column\"\r\n                bg={themeColor}\r\n                variant={themeColor}\r\n              >\r\n                {props.user != null ? (\r\n                  // async function u() {\r\n                  // updatereduxuser(props.user);\r\n                  // return\r\n                  <h6>User : {props.user.email}</h6>\r\n                ) : (\r\n                  // }\r\n                  // u;\r\n                  <Button\r\n                    variant=\"outline-primary\"\r\n                    onClick={() => {\r\n                      async function d() {\r\n                        await props.sigin();\r\n                        dispatch(Changestatus(!status));\r\n                      }\r\n                      d();\r\n                    }}\r\n                  >\r\n                    login\r\n                  </Button>\r\n                )}\r\n                <Button\r\n                  variant=\"link\"\r\n                  onClick={() => {\r\n                    dispatch(Changehome(true));\r\n                  }}\r\n                >\r\n                  home\r\n                </Button>\r\n                <Button\r\n                  variant=\"link\"\r\n                  onClick={() => {\r\n                    dispatch(Changehome(false));\r\n                  }}\r\n                >\r\n                  cart\r\n                </Button>\r\n                <Button\r\n                  variant=\"link\"\r\n                  onClick={() => {\r\n                    if (themeColor == \"light\") {\r\n                      dispatch(changeColor(\"dark\"));\r\n                    } else {\r\n                      dispatch(changeColor(\"light\"));\r\n                    }\r\n                  }}\r\n                >\r\n                  {themeColor == \"light\" ? \"dark\" : \"light\"}\r\n                </Button>\r\n                <Button variant=\"link\" onClick={() => setSmShow(true)}>\r\n                  Profile\r\n                </Button>\r\n                <Modal\r\n                  size=\"sm\"\r\n                  show={smShow}\r\n                  onHide={() => setSmShow(false)}\r\n                  aria-labelledby=\"example-modal-sizes-title-sm\"\r\n                >\r\n                  <Modal.Header closeButton>\r\n                    <Modal.Title id=\"example-modal-sizes-title-sm\">\r\n                      Profile\r\n                    </Modal.Title>\r\n                  </Modal.Header>\r\n                  <Modal.Body>\r\n                    <Row>\r\n                      <Col>\r\n                        {props.user != null ? (\r\n                          // async function u() {\r\n                          // updatereduxuser(props.user);\r\n                          // return\r\n                          <h6>User : {props.user.email}</h6>\r\n                        ) : (\r\n                          // }\r\n                          // u;\r\n                          <Button\r\n                            variant=\"outline-primary\"\r\n                            onClick={() => {\r\n                              async function d() {\r\n                                await props.sigin();\r\n                                dispatch(Changestatus(!status));\r\n                              }\r\n                              d();\r\n                            }}\r\n                          >\r\n                            login\r\n                          </Button>\r\n                        )}\r\n                      </Col>\r\n                      <Col>\r\n                        {props.user != null ? (\r\n                          <Button\r\n                            variant=\"outline-danger\"\r\n                            onClick={() => {\r\n                              async function d() {\r\n                                await props.signout();\r\n                                dispatch(Changestatus(!status));\r\n                              }\r\n                              d();\r\n                            }}\r\n                          >\r\n                            logout\r\n                          </Button>\r\n                        ) : (\r\n                          <h1></h1>\r\n                        )}\r\n                      </Col>\r\n                    </Row>\r\n                  </Modal.Body>\r\n                </Modal>\r\n              </Container>\r\n            </Offcanvas.Body>\r\n          </Navbar.Offcanvas>\r\n        </Container>\r\n      </Navbar>\r\n      <Navbar bg={themeColor} variant={themeColor} expand={false} sticky=\"top\">\r\n        <Container fluid>\r\n          <Form className=\"d-flex\">\r\n            <FormControl\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              className=\"me-2\"\r\n              aria-label=\"Search\"\r\n              onChange={handleChange}\r\n            />\r\n            <Button variant=\"outline-success\">Search</Button>\r\n          </Form>\r\n        </Container>\r\n      </Navbar>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Navb;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { Changehome } from \"../features/ishome\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Changestatus } from \"../features/status\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction LoadingButton(props) {\r\n  const [isLoading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n  let status = useSelector((state) => state.status.value);\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      async function d() {\r\n        await props.adder(props.id, props.quantity);\r\n        setLoading(false);\r\n        dispatch(Changestatus(!status));\r\n      }\r\n      d();\r\n    }\r\n  }, [isLoading]);\r\n\r\n  const handleClick = () => setLoading(true);\r\n\r\n  return (\r\n    <div>\r\n      {props.inc == true ? (\r\n        <Button\r\n          variant=\"success\"\r\n          disabled={isLoading}\r\n          onClick={!isLoading ? handleClick : null}\r\n        >\r\n          {isLoading ? \"adding..\" : \"Increase by 1\"}\r\n        </Button>\r\n      ) : (\r\n        <Button\r\n          variant=\"danger\"\r\n          disabled={isLoading}\r\n          onClick={!isLoading ? handleClick : null}\r\n        >\r\n          {isLoading ? \"decreasing..\" : \"decrease by 1\"}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nfunction Cardc(props) {\r\n  let themeColor = useSelector((state) => state.theme.value);\r\n  themeColor = themeColor == \"\" ? \"light\" : themeColor;\r\n  return (\r\n    <Col>\r\n      <Card\r\n        bg={themeColor}\r\n        text={themeColor == \"dark\" ? \"light\" : \"dark\"}\r\n        style={{ width: \"18rem\", margin: \"5px\" }}\r\n      >\r\n        <Card.Body>\r\n          <Card.Text>\r\n            <span bg=\"light\">Name:</span>\r\n            {props.name}\r\n          </Card.Text>\r\n          <Card.Text>\r\n            <span>Quantity:</span>\r\n            {props.quantity}\r\n          </Card.Text>\r\n          <br />\r\n          <LoadingButton\r\n            id={props.id}\r\n            adder={props.adder}\r\n            quantity={props.quantity}\r\n            inc={true}\r\n          />\r\n          <br />\r\n          <LoadingButton\r\n            id={props.id}\r\n            adder={props.adder1}\r\n            quantity={props.quantity}\r\n            inc={false}\r\n          />\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n}\r\n\r\nexport default Cardc;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Navb from \"./Navb\";\nimport Card from \"react-bootstrap/Card\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { Changestatus } from \"./features/status\";\nimport Cardp from \"./components/Cardp\";\n// import changeuser from \"./features/user\";\nimport Cardc from \"./components/Cardc\";\n\nconst supabaseUrl = \"https://grjedxqfuerqilmrvoat.supabase.co\";\nconst supabaseKey = process.env.REACT_APP_supabaseKey;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [state, setstate] = useState([]);\n  const [cartnew, setcartnew] = useState([]);\n  // const [status, setstatus] = useState(false);\n  let status = useSelector((state) => state.status.value);\n  const [user, setUser] = useState(null);\n\n  // const User = user;\n  // dispatch(changeuser(user));\n  const [text, settext] = useState(\"\");\n  const [lin, setlin] = useState(\"\");\n  // const [ishome, setishome] = useState(true);\n  let themeColor = useSelector((state) => state.theme.value);\n  let ishome = useSelector((state) => state.ishome.value);\n  themeColor = themeColor == \"\" ? \"light\" : themeColor;\n  let containerbg = themeColor == \"dark\" ? \"#161618\" : \"white\";\n  let textc = themeColor == \"dark\" ? \"white\" : \"black\";\n\n  let search = useSelector((state) => state.search.value);\n\n  function LoadingButton(props) {\n    const [isLoading, setLoading] = useState(false);\n\n    useEffect(() => {\n      if (isLoading) {\n        async function d() {\n          await updateby1(props.cart_mid, props.quantity);\n          dispatch(Changestatus(!status));\n          setLoading(false);\n        }\n        d();\n      }\n    }, [isLoading]);\n\n    const handleClick = () => setLoading(true);\n\n    return (\n      <Button\n        variant=\"success\"\n        disabled={isLoading}\n        onClick={!isLoading ? handleClick : null}\n      >\n        {isLoading ? \"adding..\" : \"Increase\"}\n      </Button>\n    );\n  }\n\n  function getLinkWhastapp(t) {\n    let number = \"919440827736\";\n    let message = \"\";\n    message = t.split(\" \").join(\"%20\");\n\n    return `https://api.whatsapp.com/send?phone=${number}&text=%20${message}`;\n  }\n\n  const getcheckout = async () => {\n    let { data: users, error } = await supabase\n      .from(\"cart\")\n      .select(\"cart_mname,quantity\")\n      .order(\"id\", { ascending: false });\n    setcartnew(users);\n    if (error === null) {\n      return users;\n    }\n  };\n\n  async function clearall() {\n    const { data, error } = await supabase.from(\"cart\").delete();\n    setlin(\"\");\n  }\n\n  async function updateby1(id, q) {\n    const { data, error } = await supabase\n      .from(\"cart\")\n      .update([{ quantity: q + 1 }])\n      .eq(\"cart_mid\", id);\n  }\n  async function updatebyminus1(id, q) {\n    if (q == 1) {\n      const { data, error } = await supabase\n        .from(\"cart\")\n        .delete()\n        .eq(\"cart_mid\", id);\n    } else if (q > 1) {\n      const { data, error } = await supabase\n        .from(\"cart\")\n        .update([{ quantity: q - 1 }])\n        .eq(\"cart_mid\", id);\n    }\n  }\n\n  async function signout() {\n    const { error } = await supabase.auth.signOut();\n  }\n\n  async function addCart(id, name) {\n    let { data: users, error } = await supabase\n      .from(\"cart\")\n      .select(\"quantity\")\n      .eq(\"cart_mid\", id);\n    if (users.length > 0) {\n      const { data, error } = await supabase\n        .from(\"cart\")\n        .update([{ quantity: users[0].quantity + 1 }])\n        .eq(\"cart_mid\", id);\n    } else {\n      let temp = user != null ? user.id : null;\n      if (temp != null) {\n        const { data, error } = await supabase\n          .from(\"cart\")\n          .insert([\n            { cart_uid: temp, quantity: 1, cart_mid: id, cart_mname: name },\n          ]);\n      }\n    }\n    if (error === null) {\n      return true;\n    }\n    return false;\n  }\n\n  const signInWithGoogle = async () => {\n    const { user, session, error } = await supabase.auth.signIn({\n      provider: \"google\",\n    });\n  };\n\n  useEffect(() => {\n    if (search.length < 0) {\n      const getUsers = async () => {\n        let { data: users, error } = await supabase.from(\"menu\").select(\"*\");\n        setstate(users);\n        getUsers();\n      };\n    } else {\n      const getmenubysearch = async () => {\n        let { data: users, error } = await supabase\n          .from(\"menu\")\n          .select(\"*\")\n          .ilike(\"name\", \"%\" + search + \"%\");\n        setstate(users);\n      };\n\n      getmenubysearch();\n    }\n  }, [search]);\n\n  useEffect(() => {\n    let session = null;\n    session = supabase.auth.session();\n    setUser(session?.user ?? null);\n\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        let currentUser = null;\n        currentUser = session?.user;\n        setUser(currentUser ?? null);\n      }\n    );\n    const getUsers = async () => {\n      let { data: users, error } = await supabase.from(\"menu\").select(\"*\");\n      // console.log(users);\n      setstate(users);\n    };\n    const getcartnew = async () => {\n      let { data: users, error } = await supabase\n        .from(\"cart\")\n        .select(\"cart_mid,quantity,cart_mname\")\n        .order(\"id\", { ascending: false });\n      setcartnew(users);\n      // console.log(\"cart\", cartnew);\n    };\n\n    getUsers();\n    getcartnew();\n  }, [user, status]);\n  return (\n    <Container\n      fluid\n      className=\"App\"\n      style={{ backgroundColor: containerbg, minHeight: \"100vh\" }}\n    >\n      <Navb user={user} sigin={signInWithGoogle} signout={signout} />\n\n      {ishome == true ? (\n        <Home state={state} adder={addCart} user={user} />\n      ) : (\n        <Container>\n          <Container>\n            <Row>\n              {cartnew.length > 0 ? (\n                cartnew.map((state) => (\n                  <Cardc\n                    name={state.cart_mname}\n                    id={state.cart_mid}\n                    adder={updateby1}\n                    adder1={updatebyminus1}\n                    quantity={state.quantity}\n                  />\n                ))\n              ) : user != null ? (\n                <h2 style={{ Color: \"green\" }}>cart is empty</h2>\n              ) : (\n                <h2 style={{ color: textc }}>\n                  <span>\n                    <Button\n                      variant=\"outline-primary\"\n                      onClick={() => {\n                        async function d() {\n                          await signInWithGoogle();\n                          dispatch(Changestatus(!status));\n                        }\n                        d();\n                      }}\n                    >\n                      login\n                    </Button>\n                  </span>{\" \"}\n                  to view cart\n                </h2>\n              )}\n            </Row>\n          </Container>\n          <Row>\n            <Container fluid>\n              <Row>\n                <Col>\n                  <Button\n                    onClick={() => {\n                      async function d() {\n                        await clearall();\n                        dispatch(Changestatus(!status));\n                      }\n                      d();\n                    }}\n                    variant=\"outline-warning\"\n                  >\n                    clear all\n                  </Button>\n                </Col>\n                <Col>\n                  <Button\n                    onClick={() => {\n                      async function d() {\n                        let text = \"\";\n                        let temp = await getcheckout();\n                        if (temp != null) {\n                          for (let i = 0; i < temp.length; i++) {\n                            const { quantity, cart_mname } = temp[i];\n                            text +=\n                              \"\" + cart_mname + \" \" + quantity + \" KG\" + \",\";\n                          }\n                        }\n                        // console.log(text);\n                        settext(text);\n                        dispatch(Changestatus(!status));\n                        if (text.length > 1) {\n                          setlin(getLinkWhastapp(text));\n                        }\n                      }\n                      d();\n                    }}\n                    variant=\"outline-primary\"\n                  >\n                    check out\n                  </Button>\n                </Col>\n              </Row>\n            </Container>\n          </Row>\n          {lin.length > 0 ? (\n            <Button variant=\"outline-success\">\n              <a\n                className=\"font-monospace\"\n                style={{ textDecoration: \"None\" }}\n                href={lin}\n              >\n                placeorder\n              </a>\n            </Button>\n          ) : (\n            <Card\n              text={themeColor == \"dark\" ? \"light\" : \"dark\"}\n              bg={themeColor}\n              className=\" m-3\"\n            >\n              <Card.Text>check out to place order</Card.Text>\n            </Card>\n          )}\n        </Container>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport themeReducer from \"./features/theme\";\nimport ishomeReducer from \"./features/ishome\";\nimport statusReducer from \"./features/status\";\nimport searchReducer from \"./features/search\";\nimport userReducer from \"./features/user\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nconst store = configureStore({\n  reducer: {\n    theme: themeReducer,\n    ishome: ishomeReducer,\n    status: statusReducer,\n    search: searchReducer,\n    user: userReducer,\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}